{"version":3,"file":"index-DWCG4js8.js","sources":["../../../../node_modules/nuxt/dist/app/composables/state.js","../../../../components/modals/global.vue","../../../../stores/game.ts","../../../../components/GameField.vue","../../../../components/Library.vue","../../../../components/Hand.vue","../../../../components/Graveyard.vue","../../../../components/Exile.vue","../../../../pages/game/index.vue"],"sourcesContent":["import { isRef, toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nconst useStateKeyPrefix = \"$s\";\nexport function useState(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [_key, init] = args;\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useState] key must be a string: \" + _key);\n  }\n  if (init !== void 0 && typeof init !== \"function\") {\n    throw new Error(\"[nuxt] [useState] init must be a function: \" + init);\n  }\n  const key = useStateKeyPrefix + _key;\n  const nuxtApp = useNuxtApp();\n  const state = toRef(nuxtApp.payload.state, key);\n  if (state.value === void 0 && init) {\n    const initialValue = init();\n    if (isRef(initialValue)) {\n      nuxtApp.payload.state[key] = initialValue;\n      return initialValue;\n    }\n    state.value = initialValue;\n  }\n  return state;\n}\nexport function clearNuxtState(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const _key of _keys) {\n    const key = useStateKeyPrefix + _key;\n    if (key in nuxtApp.payload.state) {\n      nuxtApp.payload.state[key] = void 0;\n    }\n  }\n}\n","<template>\r\n    <div class=\"modal\">\r\n        <div class=\"overlay\"></div>\r\n        <div class=\"modal-con\">\r\n            <div class=\"modal-header\">\r\n                <div class=\"wrapper\">\r\n                    <slot name=\"header\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <div class=\"wrapper\">\r\n                    <slot />\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <div class=\"wrapper\">\r\n                    <slot name=\"footer\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .modal {\r\n        position: fixed;\r\n        left: 50%;\r\n        top: 50%;\r\n        transform: translate(-50%, -50%);\r\n        min-width: 400px;\r\n        max-width: 100%;\r\n        min-height: 200px;\r\n        max-height: 80%;\r\n        box-sizing: border-box;\r\n        box-sizing: border-box;\r\n        border-radius: 8px;\r\n        box-shadow: -4px 5px 14px 1px #1a1a1a;\r\n        border: 2px solid #1a1a1a;\r\n        z-index: 1;\r\n        background: #ffffffff;\r\n        color: #1a1a1a;\r\n        .modal-con {\r\n            .modal-header {\r\n                box-shadow: 0px 7px 20px -6px #1a1a1a;\r\n                padding: 8px 0;\r\n                font-weight: 700;\r\n                text-transform: uppercase;\r\n            }\r\n            .modal-body {\r\n                padding: 25px 0;\r\n            }\r\n            .modal-footer {\r\n                box-shadow: 0px -7px 20px -6px #1a1a1a;\r\n                padding: 8px 0;\r\n                .wrapper {\r\n                    display: flex;\r\n                    justify-content: flex-end;\r\n                    align-items: center;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    .wrapper {\r\n        padding: 0 22px;\r\n        position: relative;\r\n    }\r\n\r\n</style>","import type { RuntimeConfig } from 'nuxt/schema'\r\nimport { defineStore } from 'pinia'\r\nimport type { GameCard } from '~/types/Card'\r\nimport type { Player } from '~/types/Player'\r\nimport type { Zone } from '~/types/Zone'\r\n\r\nexport const useGameStore = defineStore('game', {\r\n  state: () => {\r\n    return { \r\n      connectedCount : 0,\r\n      you : {} as Player,\r\n      players : [] as Player[],\r\n      playerLastId : 0 as number,\r\n      ws : null as WebSocket | null,\r\n    }\r\n  },\r\n  getters: {\r\n    getConnectedCount: (state) => state.connectedCount,\r\n    getYourInfo: (state) => state.you,\r\n    getPlayers: (state) => state.players,\r\n    getOpponents: (state) => {\r\n      return state.players.filter(player => player.id !== state.you.id)\r\n    },\r\n    getPlayerLastId: (state) => state.playerLastId,\r\n  },\r\n  actions: {\r\n    join() {\r\n      const you = {\r\n        id: 'player'+(this.playerLastId+1),\r\n        name: 'Player '+(this.playerLastId+1),\r\n        cards: [],\r\n        zone: {battlefield: [], graveyard: [], exile: [], library: [], hand: []},\r\n        health: 20\r\n      }\r\n\r\n      this.you = you\r\n      this.addPlayer(you)\r\n\r\n      if (this.$state.ws && this.$state.ws.readyState === WebSocket.OPEN) {\r\n        const message = {\r\n            players : this.$state.players,\r\n            playerLastId : this.$state.playerLastId,\r\n        }\r\n        this.$state.ws.send(JSON.stringify(message));\r\n      }\r\n    },\r\n    incrementConnected() {\r\n      this.$state.connectedCount++;\r\n    },\r\n    decrementConnected() {\r\n      this.$state.connectedCount--\r\n    },\r\n    setPlayers(players: Player[]) {\r\n      this.$state.players = players\r\n    },\r\n    setLastPlayerId(id: number) {\r\n      this.$state.playerLastId = id;\r\n    },\r\n    addPlayer(player: Player) {\r\n      this.players.push(player)\r\n      this.playerLastId++\r\n      this.broadcastChanges()\r\n    },\r\n    updatePlayer(updatedPlayer: Player) {\r\n      this.$state.players = this.$state.players.map(player =>\r\n        player.id === updatedPlayer.id ? updatedPlayer : player\r\n      );\r\n      this.broadcastChanges()\r\n    },\r\n    cardsToLibrary() {\r\n      this.$patch(state => {\r\n        const library: GameCard[] = [];\r\n        state.you.cards.forEach(card => {\r\n          for(let i=0; i<card.quantity; i++) {\r\n            library.push ({\r\n              ...card,\r\n              id: card.sourceId + '-' +(i+1),\r\n              isRevealed: false,\r\n              isFaceUp: false,\r\n              isTapped: false,\r\n              posX: 0,\r\n              posY: 0,\r\n              powerCounter: 0,\r\n              toughnessCounter: 0,\r\n            } as GameCard);\r\n          }\r\n          \r\n        });\r\n    \r\n        // Update the library\r\n        state.you.zone.library = [...library];\r\n    \r\n        // Create a new reference for the players array\r\n        state.players = state.players.map(player =>\r\n          player.id === state.you.id ? { ...state.you } : { ...player }\r\n        );\r\n      });\r\n      this.broadcastChanges()\r\n    },\r\n    shiftLibraryCard(card: GameCard, direction: string) {\r\n      const library = this.$state.you.zone.library\r\n      const index = library.findIndex(item => item.id === card.id)\r\n      let newIndex = direction === 'right' ? index - 1 : index + 1;\r\n\r\n      if (newIndex < 0 || newIndex >= library.length) return;\r\n\r\n      [library[index], library[newIndex]] = [library[newIndex], library[index]];\r\n      this.$state.you.zone.library = library;\r\n\r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => {\r\n        if(player.id === this.$state.you.id)\r\n          return this.$state.you\r\n        return player\r\n      })\r\n      this.broadcastChanges()\r\n    },\r\n    moveToBottomLibrary(card: GameCard) {\r\n      const library = this.$state.you.zone.library\r\n      const index = library.findIndex(item => item.id === card.id)\r\n\r\n      if (index <= 0 || index >= library.length) return;\r\n      const [element] = library.splice(index, 1);\r\n      element.isFaceUp = false\r\n      library.unshift(element);\r\n      this.$state.you.zone.library = library;\r\n\r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => {\r\n        if(player.id === this.$state.you.id)\r\n          return this.$state.you\r\n        return player\r\n      })\r\n      this.broadcastChanges()\r\n    },\r\n    drawCard() {\r\n      if(this.you.zone.library.length > 0) {\r\n        const card: GameCard = this.$state.you.zone.library.pop() as GameCard\r\n        this.$state.you.zone.hand.push(card)\r\n\r\n        // Sync your info to the players list\r\n        this.$state.players = this.$state.players.map(player => {\r\n          if(player.id === this.$state.you.id)\r\n            return this.$state.you\r\n          return player\r\n        })\r\n        this.broadcastChanges()\r\n      }\r\n    },\r\n    changeZone(card: GameCard, fromZone: string, toZone: string) {\r\n      // Find the card in the fromZone and remove it\r\n      const cardIndex = this.$state.you.zone[fromZone].findIndex((item:GameCard) => item.id === card.id);\r\n      \r\n      if (cardIndex !== -1) {\r\n          // Remove the card from the fromZone\r\n          const [removedCard] = this.$state.you.zone[fromZone].splice(cardIndex, 1);\r\n\r\n          if(toZone == 'library') {\r\n            removedCard.isFaceUp    = false\r\n            removedCard.isRevealed  = false\r\n            removedCard.isTapped    = false\r\n          }\r\n  \r\n          // Push the removed card to the toZone\r\n          this.$state.you.zone[toZone].push(removedCard);\r\n      }\r\n  \r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => \r\n          player.id === this.$state.you.id ? this.$state.you : player\r\n      );\r\n      this.broadcastChanges()\r\n    },\r\n    addToken(card: GameCard) {\r\n      const timestamp = Date.now();\r\n      const newCard = Object.assign({}, card);\r\n      newCard.id = card.id + '-' + timestamp\r\n      this.$state.you.zone['battlefield'].push(card);\r\n  \r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => \r\n          player.id === this.$state.you.id ? this.$state.you : player\r\n      );\r\n      this.broadcastChanges()\r\n    },\r\n    giveToOpponent(card: GameCard, opponent: Player, fromZone: string, toZone: string) {\r\n      // Find the card in the fromZone and remove it\r\n      const cardIndex = this.$state.you.zone[fromZone].findIndex(item => item.id === card.id);\r\n      \r\n      if (cardIndex !== -1) {\r\n          // Remove the card from the fromZone\r\n          const [removedCard] = this.$state.you.zone[fromZone].splice(cardIndex, 1);\r\n\r\n          // Find opponent from the list of players\r\n          this.$state.players.map(player => {\r\n            if(player.id === opponent.id) {\r\n              player.zone[toZone].push(removedCard);\r\n            }\r\n          })\r\n  \r\n          // Push the removed card to the toZone\r\n          // this.$state.you.zone[toZone].push(removedCard);\r\n      }\r\n  \r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => \r\n          player.id === this.$state.you.id ? this.$state.you : player\r\n      );\r\n      this.broadcastChanges()\r\n    },\r\n    shuffle() {\r\n      this.$state.you.zone.library = [...this.$state.you.zone.library].sort(() => Math.random() - 0.5)\r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => \r\n        player.id === this.$state.you.id ? this.$state.you : player\r\n      );\r\n      this.broadcastChanges()\r\n    },\r\n    updateHealth(health: number) {\r\n      this.$state.you.health = health;\r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => \r\n        player.id === this.$state.you.id ? this.$state.you : player\r\n      );\r\n      this.broadcastChanges()\r\n    },\r\n    tapCard(card: GameCard) {\r\n      this.$state.you.zone.battlefield.map(battleFieldCard => {\r\n        if(battleFieldCard.id === card.id) {\r\n          battleFieldCard.isTapped = !battleFieldCard.isTapped\r\n          return battleFieldCard\r\n        }\r\n        return battleFieldCard\r\n      })\r\n\r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => {\r\n        if(player.id === this.$state.you.id)\r\n          return this.$state.you\r\n        return player\r\n      })\r\n      this.broadcastChanges()\r\n    },\r\n    revealCard(card: GameCard) {\r\n      this.$state.you.zone.battlefield.map(battleFieldCard => {\r\n        if(battleFieldCard.id === card.id) {\r\n          battleFieldCard.isFaceUp          = true\r\n          battleFieldCard.isRevealed        = true\r\n          battleFieldCard.powerCounter      = 0\r\n          battleFieldCard.toughnessCounter  = 0\r\n          return battleFieldCard\r\n        }\r\n        return battleFieldCard\r\n      })\r\n\r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => {\r\n        if(player.id === this.$state.you.id)\r\n          return this.$state.you\r\n        return player\r\n      })\r\n      this.broadcastChanges()\r\n    },\r\n    setFaceupLibrary(reveal = true) {\r\n      this.$state.you.zone.library.map(card => {\r\n        card.isFaceUp    = reveal\r\n      })\r\n\r\n      // Sync your info to the players list\r\n      this.$state.players = this.$state.players.map(player => {\r\n        if(player.id === this.$state.you.id)\r\n          return this.$state.you\r\n        return player\r\n      })\r\n      this.broadcastChanges()\r\n    },\r\n    revealTopLibrary() {\r\n      for(let i = this.$state.you.zone.library.length - 1; i>=0; i--) {\r\n        if(this.$state.you.zone.library[i].isFaceUp)\r\n          continue;\r\n        else {\r\n          this.$state.you.zone.library[i].isFaceUp = true\r\n\r\n          // Sync your info to the players list\r\n          this.$state.players = this.$state.players.map(player => {\r\n            if(player.id === this.$state.you.id)\r\n              return this.$state.you\r\n            return player\r\n          })\r\n          this.broadcastChanges()\r\n          break;\r\n        }\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Websocket initialization\r\n     */\r\n    startWebSocketServer() {\r\n      const config: any = useRuntimeConfig();\r\n      this.$state.ws = new WebSocket(config.public.wsEndpoint);\r\n\r\n      this.$state.ws.onmessage = (event) => {\r\n          const eventData = JSON.parse(event.data);\r\n          if(eventData.hasOwnProperty('type')) {\r\n              console.log(\"eventdata:\",eventData)\r\n              if(eventData.type === 'updatePlayers' && JSON.stringify(eventData.data.players) !== JSON.stringify(this.$state.players)) {\r\n                  this.setPlayers(eventData.data.players)\r\n                  this.$state.playerLastId = eventData.data.playerLastId;\r\n              }\r\n              else if(eventData.type === 'updatePlayerCount') {\r\n                  this.$state.connectedCount = eventData.data\r\n              }\r\n          }\r\n      };\r\n\r\n      this.$state.ws.onopen = () => {\r\n          \r\n      };\r\n\r\n      this.$state.ws.onclose = () => {\r\n          \r\n      };\r\n    },\r\n    broadcastChanges() {\r\n      if (this.$state.ws && this.$state.ws.readyState === WebSocket.OPEN) {\r\n          const message = {\r\n              players : this.$state.players,\r\n              playerLastId : this.$state.playerLastId,\r\n          }\r\n          this.$state.ws.send(JSON.stringify(message));\r\n      }\r\n    }\r\n  },\r\n})","<template>\r\n    <div>\r\n\r\n        <div id=\"gamefield\">\r\n            <section>\r\n                <div class=\"card-info\" v-if=\"selectedCard\">\r\n                    <ul>\r\n                        <li><button @click=\"gameState.tapCard(selectedCard)\">Tap / Untap</button></li>\r\n                        <li v-if=\"!selectedCard.isFaceUp\"><button @click=\"gameState.revealCard(selectedCard)\">Face up / Reveal</button></li>\r\n                        <li><button @click=\"gameState.changeZone(selectedCard, 'battlefield', 'graveyard')\">To Graveyard</button></li>\r\n                        <li><button @click=\"gameState.changeZone(selectedCard, 'battlefield', 'exile')\">To Exile</button></li>\r\n                        <li><button @click=\"gameState.changeZone(selectedCard, 'battlefield', 'hand')\">To Hand</button></li>\r\n                        <li><button @click=\"addToken\">Add Token</button></li>\r\n                        <li><button @click=\"showAttributes\">Attributes</button></li>\r\n                    </ul>\r\n                    <img :src=\"selectedCard.imageUris.normal\" />\r\n                </div>\r\n            </section>\r\n            <section class=\"pixi-section\">\r\n                <div id=\"pixiContainer\" ref=\"pixiContainer\"></div>\r\n            </section>\r\n        </div>\r\n\r\n        <ModalsGlobal v-if=\"modalState.isActive && modalState.type == 'showAttributes' && modalState.data\">\r\n            <template #header>\r\n                Select Card Face\r\n            </template>\r\n            \r\n            <template v-if=\"selectedCard\">\r\n                <p>Power: {{ selectedCard.power + selectedCard.powerCounter }} \r\n                    <button @click=\"updateStats('power', selectedCard.powerCounter - 1)\">-</button>\r\n                    <button @click=\"updateStats('power', selectedCard.powerCounter + 1)\">+</button>\r\n                    <button @click=\"updateStats('power', 0)\">reset</button>\r\n                </p>\r\n                <p>Toughness: {{ selectedCard.toughness + selectedCard.toughnessCounter }} \r\n                    <button @click=\"updateStats('toughness', selectedCard.toughnessCounter - 1)\">-</button>\r\n                    <button @click=\"updateStats('toughness', selectedCard.toughnessCounter + 1)\">+</button>\r\n                    <button @click=\"updateStats('toughness', 0)\">reset</button>\r\n                </p>\r\n            </template>\r\n\r\n            <template #footer>\r\n                <button @click=\"modalState.isActive = false\">Close</button>\r\n            </template>\r\n        </ModalsGlobal>\r\n\r\n        <ModalsGlobal v-else-if=\"modalState.isActive && modalState.type == 'addToken'\">\r\n            <template #header>\r\n                Click a token to add to the battlefield\r\n            </template>\r\n            \r\n            <template v-if=\"selectedCard\">\r\n                <ul>\r\n                    <template v-for=\"(data, index) in modalState.data\" :key=\"index\">\r\n                        <li>\r\n                            <img :src=\"data.imageUris.small\" @click=\"gameState.addToken(data)\" />\r\n                        </li>\r\n                    </template>\r\n                </ul>\r\n            </template>\r\n\r\n            <template #footer>\r\n                <button @click=\"modalState.isActive = false\">Close</button>\r\n            </template>\r\n        </ModalsGlobal>\r\n    </div>\r\n</template>\r\n  \r\n<script setup lang=\"ts\">\r\n    import { useGameStore } from '~/stores/game';\r\n    import { onMounted, ref, computed, watch } from 'vue';\r\n    import { Application, Assets, Sprite, InteractionEvent, Text, Graphics, Container } from 'pixi.js';\r\n    import type { GameCard, Token } from '~/types/Card';\r\n    import type { Player } from '~/types/Player';\r\n    \r\n    const gameState = useGameStore();\r\n    const selectedCard = useState<GameCard | null>('selectedCard', () => null)\r\n    const getYourInfo = computed<Player>(() => gameState.getYourInfo);\r\n    const getOpponents = computed(() => gameState.getOpponents);\r\n    const modalState: Ref<{isActive: boolean, type: string | null, data: any | null}> = ref({isActive: false, type: null, data: null})\r\n    \r\n    // Track the currently loaded images and their positions\r\n    const pixiContainer = ref<any>(null);\r\n    const cardSprites = new Map<string, Sprite>();  // A map to track the card sprites by ID\r\n    const cardLabels = new Map<string, Container>(); // Track labels for updating\r\n\r\n    const showAttributes = () => {\r\n        modalState.value.isActive   = true\r\n        modalState.value.type       = 'showAttributes'\r\n    }\r\n\r\n    const updateStats = (type: string, value: number) => {\r\n        if(selectedCard.value) {\r\n            getYourInfo.value.zone.battlefield = getYourInfo.value.zone.battlefield.map(card => {\r\n                if(card.id === selectedCard?.value?.id)  {\r\n                    switch(type) {\r\n                        case 'power':\r\n                            card.powerCounter = value;\r\n                            break;\r\n                        case 'toughness':\r\n                            card.toughnessCounter = value;\r\n                            break;\r\n                    }\r\n                }\r\n                return card;\r\n            })\r\n            gameState.updatePlayer(getYourInfo.value);\r\n        }\r\n    }\r\n\r\n    const updateCardLabel = (card: GameCard, cardLabelContainer: Container | undefined, cardSprite: Sprite) => {\r\n        if(cardLabelContainer) {\r\n            if(card.isTapped) {\r\n                const cardWidthHalf = cardSprite.width / 2\r\n                const labelWidthHalf = cardLabelContainer.width / 2\r\n                const cardHeightHalf = cardSprite.height / 2\r\n                cardLabelContainer.x = cardSprite.x + cardHeightHalf - labelWidthHalf;\r\n                cardLabelContainer.y = cardSprite.y - cardWidthHalf + labelWidthHalf;\r\n            }\r\n            else {\r\n                cardLabelContainer.x = cardSprite.x + (cardSprite.width / 2) - (cardLabelContainer.width / 2);\r\n                cardLabelContainer.y = cardSprite.y + (cardSprite.height) / 2 - (cardLabelContainer.height / 2);\r\n            }\r\n\r\n            const label = cardLabelContainer.children.find(child => child instanceof Text) as Text | undefined;\r\n            if (label) {\r\n                const labelText = !card.isFaceUp ? `${card.powerCounter}/${card.toughnessCounter}` : `${card.power + card.powerCounter}/${card.toughness + card.toughnessCounter}`\r\n                label.text = labelText;\r\n            }\r\n        }\r\n    };\r\n\r\n    const addToken = () => {\r\n        modalState.value.isActive = true\r\n        modalState.value.type = 'addToken'\r\n\r\n        modalState.value.data = []\r\n        if(selectedCard.value?.allParts) {\r\n            selectedCard.value.allParts.forEach(async (part: any) => {\r\n                if(part.object === 'related_card' && part.component === 'token') {\r\n                    const response = await fetch(part.uri, {\r\n                        method: \"GET\",\r\n                        headers: { \"Content-Type\": \"application/json\" },\r\n                    });\r\n                    const data: any = await response.json();\r\n                    const token: Token = {\r\n                        id: data.id,\r\n                        isRevealed: true,\r\n                        isFaceUp: true,\r\n                        isTapped: false,\r\n                        posX: data.power | 0,\r\n                        posY: data.toughness | 0,\r\n                        powerCounter: 0,\r\n                        toughnessCounter: 0,\r\n                        referenceCard: selectedCard.value as GameCard,\r\n                        imageUris: data.image_uris,\r\n                    }\r\n                    modalState.value.data.push(token)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    \r\n    onMounted(async () => {\r\n        let canvasWidth     = 1200\r\n        let canvasHeight    = 950\r\n        const app = new Application();\r\n        await app.init({ background: '#2C3E50', width: canvasWidth, height: canvasHeight });\r\n    \r\n        pixiContainer.value.appendChild(app.canvas);\r\n    \r\n        const loadYourCards = async () => {\r\n\r\n            const battleFieldCardsUpdate = []\r\n        \r\n            try {\r\n                // Remove cards from the battlefield\r\n                for (const [key, sprite] of cardSprites.entries()) {\r\n                    if (key.startsWith(getYourInfo.value.id + '-') && \r\n                        !getYourInfo.value.zone.battlefield.some(card => getYourInfo.value.id+'-'+card.id === key)) {\r\n                        sprite.destroy();  // Remove from PIXI\r\n                        cardSprites.delete(key);  // Remove from map\r\n                    }\r\n                }\r\n                // Remove labels from the battlefield\r\n                for (const [key, text] of cardLabels.entries()) {\r\n                    if (key.startsWith(getYourInfo.value.id + '-') && \r\n                        !getYourInfo.value.zone.battlefield.some(card => getYourInfo.value.id+'-'+card.id === key)) {\r\n                        text.destroy();  // Remove from PIXI\r\n                        cardLabels.delete(key);  // Remove from map\r\n                    }\r\n                }\r\n\r\n                // Loop through the battlefield cards\r\n                const loadPromises = getYourInfo.value.zone.battlefield.map(async (card) => {\r\n\r\n                    const faceUpTexture     = await Assets.load(card.imageUris.small);\r\n                    const faceDownTexture   = await Assets.load('/back-small.jpeg');\r\n                    const key               = getYourInfo.value.id + '-' + card.id;\r\n\r\n                    // Check if the card already exists\r\n                    if (cardSprites.has(key)) {\r\n                        const existingCardSprites = cardSprites.get(key);\r\n\r\n                        if(selectedCard.value && selectedCard.value?.id === card.id && existingCardSprites) {\r\n                            if(card.isTapped) {\r\n                                existingCardSprites.rotation = -Math.PI / 2;\r\n                            }\r\n                            else\r\n                                existingCardSprites.rotation = 0;\r\n                            \r\n                            existingCardSprites.texture = card.isFaceUp ? faceUpTexture : faceDownTexture;\r\n\r\n                            if (cardLabels.has(key)) {\r\n                                updateCardLabel(card, cardLabels.get(key), existingCardSprites)\r\n                            }\r\n                        }\r\n\r\n                        battleFieldCardsUpdate.push(card)\r\n                        return;\r\n                    }\r\n            \r\n                    // If card does not exist, load and add it\r\n                    const cardTexture = new Sprite(card.isFaceUp ? faceUpTexture : faceDownTexture);\r\n                    app.stage.addChild(cardTexture);\r\n                    cardSprites.set(key, cardTexture); // Track the sprite by card id\r\n            \r\n                    cardTexture.anchor.set(0.5);\r\n                    cardTexture.x = card.posX = app.screen.width / 2;\r\n                    cardTexture.y = card.posY = app.screen.height / 2;\r\n\r\n                    // Create a text label below the card\r\n                    const cardLabel = new Text(`${card.power + card.powerCounter}/${card.toughness + card.toughnessCounter}`, {\r\n                        fontSize: 16,\r\n                        fill: 0xffffff, // White text\r\n                        align: \"center\",\r\n                        fontWeight: \"bold\",\r\n                    });\r\n                    const cardLabelContainer: Container = getCardLabel(card, cardTexture, cardLabel)\r\n                    cardLabelContainer.x = cardTexture.x + (cardTexture.width / 2) - (cardLabelContainer.width / 2);\r\n                    cardLabelContainer.y = cardTexture.y + (cardTexture.height) / 2 - (cardLabelContainer.height / 2);\r\n                    app.stage.addChild(cardLabelContainer);\r\n                    cardLabels.set(key, cardLabelContainer);\r\n\r\n                    battleFieldCardsUpdate.push(card)\r\n            \r\n                    // Enable interaction for dragging\r\n                    cardTexture.interactive = true;\r\n                    cardTexture.buttonMode = true;\r\n            \r\n                    let isDragging = false;\r\n                    let offsetX = 0;\r\n                    let offsetY = 0;\r\n\r\n                    gameState.broadcastChanges()\r\n            \r\n                    // Handle mouse down (begin dragging)\r\n                    cardTexture.on('pointerdown', (event: InteractionEvent) => {\r\n                        isDragging = true;\r\n                        const position = event.data.getLocalPosition(cardTexture.parent);\r\n                        offsetX = position.x - cardTexture.x;\r\n                        offsetY = position.y - cardTexture.y;\r\n            \r\n                        // Bring the dragged card to the top\r\n                        app.stage.setChildIndex(cardTexture, app.stage.children.length - 1);\r\n                        app.stage.setChildIndex(cardLabelContainer, app.stage.children.length - 1);\r\n                    });\r\n            \r\n                    // Handle mouse move (dragging)\r\n                    cardTexture.on('pointermove', (event: InteractionEvent) => {\r\n                        if (isDragging) {\r\n                            const position = event.data.getLocalPosition(cardTexture.parent);\r\n\r\n                            // Calculate new position\r\n                            let newX = position.x - offsetX;\r\n                            let newY = position.y - offsetY;\r\n\r\n                            // Clamp within canvas bounds\r\n                            const minX = 0 + (cardTexture.width / 2);\r\n                            const minY = 0 + (cardTexture.height / 2);\r\n                            const maxX = canvasWidth - (cardTexture.width / 2);\r\n                            const maxY = canvasHeight - (cardTexture.height / 2);\r\n\r\n                            cardTexture.x = Math.max(minX, Math.min(newX, maxX));\r\n                            cardTexture.y = Math.max(minY, Math.min(newY, maxY));\r\n\r\n                            cardLabel.anchor.set(0.5);\r\n                            cardLabelContainer.x = cardTexture.x + cardTexture.width / 2 - 20;\r\n                            cardLabelContainer.y = cardTexture.y + cardTexture.height / 2 - 15;\r\n\r\n                            // Update game state\r\n                            getYourInfo.value.zone.battlefield = getYourInfo.value.zone.battlefield.map(item => {\r\n                                if (item.id === card.id) {\r\n                                    item.posX = cardTexture.x;\r\n                                    item.posY = cardTexture.y;\r\n                                    return item;\r\n                                }\r\n                                return item;\r\n                            });\r\n\r\n                            // gameState.updatePlayer(getYourInfo.value);\r\n                        }\r\n                    });\r\n\r\n            \r\n                    // Handle mouse up (stop dragging)\r\n                    cardTexture.on('pointerup', (event: InteractionEvent) => {\r\n                        \r\n                        getYourInfo.value.zone.battlefield = getYourInfo.value.zone.battlefield.map(item => {\r\n                            if(item.id === card.id) {\r\n                                const position = event.data.getLocalPosition(cardTexture.parent);\r\n                                item.posX = position.x - offsetX\r\n                                item.posY = position.y - offsetY\r\n                                selectedCard.value = card as GameCard | null\r\n                                return item\r\n                            }\r\n                            return item\r\n                        })\r\n                        gameState.updatePlayer(getYourInfo.value)\r\n\r\n                        isDragging = false;\r\n                    });\r\n            \r\n                    // Handle mouse up outside the card (stop dragging)\r\n                    cardTexture.on('pointerupoutside', () => {\r\n                        isDragging = false;\r\n                    });\r\n                });\r\n        \r\n                await Promise.all(loadPromises);\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n\r\n        const loadOpponentsCards = async () => {\r\n            getOpponents.value.forEach(async (opponent) => {\r\n\r\n                // Remove cards from the battlefield\r\n                for (const [key, sprite] of cardSprites.entries()) {\r\n                    if (key.startsWith(opponent.id + '-') && \r\n                        !opponent.zone.battlefield.some(card => opponent.id+'-'+card.id === key)) {\r\n                        sprite.destroy();  // Remove from PIXI\r\n                        cardSprites.delete(key);  // Remove from map\r\n                    }\r\n                }\r\n                // Remove labels from the battlefield\r\n                for (const [key, text] of cardLabels.entries()) {\r\n                    if (key.startsWith(opponent.id + '-') && \r\n                        !opponent.zone.battlefield.some(card => opponent.id+'-'+card.id === key)) {\r\n                        text.destroy();  // Remove from PIXI\r\n                        cardLabels.delete(key);  // Remove from map\r\n                    }\r\n                }\r\n\r\n                try {\r\n                    // Loop through the battlefield cards\r\n                    const loadPromises = opponent.zone.battlefield.map(async (card) => {\r\n\r\n                        const faceUpTexture     = await Assets.load(card.imageUris.small);\r\n                        const faceDownTexture   = await Assets.load('/back-small.jpeg');\r\n                        const key               = opponent.id + '-' + card.id;\r\n\r\n                        // Check if the card already exists\r\n                        if (cardSprites.has(opponent.id+'-'+card.id)) {\r\n                            const existingCardSprites = cardSprites.get(opponent.id+'-'+card.id);\r\n                            if(existingCardSprites) {\r\n                                existingCardSprites.anchor.set(0.5);\r\n                                existingCardSprites.x = canvasWidth - card.posX\r\n                                existingCardSprites.y = canvasHeight - card.posY\r\n\r\n                                if(card.isTapped)\r\n                                    existingCardSprites.rotation = -Math.PI / 2;\r\n                                else\r\n                                    existingCardSprites.rotation = 0;\r\n\r\n                                existingCardSprites.texture = card.isFaceUp ? faceUpTexture : faceDownTexture;\r\n\r\n                                if (cardLabels.has(key)) {\r\n                                    const cardLabelContainer = cardLabels.get(key);\r\n                                    if(cardLabelContainer) {\r\n                                        updateCardLabel(card, cardLabelContainer, existingCardSprites)\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            return;\r\n                        }\r\n\r\n                        // If card does not exist, load and add it\r\n                        const cardTexture = new Sprite(card.isFaceUp ? faceUpTexture : faceDownTexture);\r\n                        app.stage.addChild(cardTexture);\r\n                        cardSprites.set(opponent.id+'-'+card.id, cardTexture); // Track the sprite by card id\r\n                \r\n                        cardTexture.anchor.set(0.5);\r\n                        cardTexture.x = card.posX = app.screen.width / 2;\r\n                        cardTexture.y = card.posY = app.screen.height / 2;\r\n                        \r\n\r\n                        // Enable interaction\r\n                        cardTexture.interactive = true;\r\n                        cardTexture.buttonMode = true;\r\n\r\n                        let offsetX = 0;\r\n                        let offsetY = 0;\r\n\r\n                        // Create a text label below the card\r\n                        const labelText = !card.isFaceUp ? `${card.powerCounter}/${card.toughnessCounter}` : `${card.power + card.powerCounter}/${card.toughness + card.toughnessCounter}`\r\n                        const cardLabel = new Text(labelText, {\r\n                            fontSize: 16,\r\n                            fill: 0xffffff, // White text\r\n                            align: \"center\",\r\n                            fontWeight: \"bold\",\r\n                        });\r\n                        const cardLabelContainer: Container = getCardLabel(card, cardTexture, cardLabel)\r\n                        cardLabelContainer.x = cardTexture.x + cardTexture.width / 2 - 20;\r\n                        cardLabelContainer.y = cardTexture.y + cardTexture.height / 2 - 15;\r\n                        app.stage.addChild(cardLabelContainer);\r\n                        cardLabels.set(key, cardLabelContainer);\r\n\r\n                        // Handle mouse down (begin dragging)\r\n                        cardTexture.on('pointerdown', (event: InteractionEvent) => {\r\n                            const position = event.data.getLocalPosition(cardTexture.parent);\r\n                            offsetX = position.x - cardTexture.x;\r\n                            offsetY = position.y - cardTexture.y;\r\n                \r\n                            // Bring the dragged card to the top\r\n                            app.stage.setChildIndex(cardTexture, app.stage.children.length - 1);\r\n                            app.stage.setChildIndex(cardLabelContainer, app.stage.children.length - 1);\r\n                        });\r\n\r\n                        // Handle mouse up (stop dragging)\r\n                        cardTexture.on('pointerup', (event: InteractionEvent) => {\r\n                            \r\n                            getOpponents.value.forEach(opponent => {\r\n                                opponent.zone.battlefield.map(opponentCard => {\r\n                                    if(opponentCard.id === card.id) {\r\n                                        if(opponentCard.isRevealed)\r\n                                            selectedCard.value = card as GameCard | null\r\n                                            else {\r\n                                        selectedCard.value = null\r\n                                    }\r\n                                    }\r\n                                    \r\n                                })\r\n                            })\r\n                            \r\n                        });\r\n\r\n                    });\r\n        \r\n                    await Promise.all(loadPromises);\r\n\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            });\r\n        };\r\n\r\n        const getCardLabel = (card: GameCard, cardTexture: any, cardLabel: Text): Container => {\r\n            cardLabel.anchor.set(0.5);\r\n            // cardLabel.x = cardTexture.x + cardTexture.width / 2 - 20;\r\n            // cardLabel.y = cardTexture.y + cardTexture.height / 2 - 15;\r\n\r\n            // Create a background rectangle\r\n            const background = new Graphics();\r\n            background.beginFill(0x000000); // Red background\r\n            background.drawRect(cardLabel.x - cardLabel.width/2 - 5, cardLabel.y - cardLabel.height/2 - 5, cardLabel.width + 10, cardLabel.height + 10); // Add some padding\r\n            background.endFill();\r\n\r\n            // Create a container to group the background and text\r\n            const container = new Container();\r\n            container.addChild(background);\r\n            container.addChild(cardLabel);\r\n\r\n            return container\r\n        }\r\n    \r\n\r\n        watch(getYourInfo, (newValue) => {\r\n            loadYourCards();\r\n        }, { deep: true, immediate: true });\r\n\r\n        watch(getOpponents, (newValue) => {\r\n            loadOpponentsCards();\r\n        }, { deep: true, immediate: true });\r\n    });\r\n</script>\r\n  \r\n<style lang=\"scss\" scoped>\r\n    #gamefield {\r\n        display: flex;\r\n        justify-content: center;\r\n        padding: 52px 24px;\r\n        section {\r\n            &:nth-child(1) {\r\n                order: 1;\r\n                height: 100%;\r\n                min-width: 633px;\r\n            }\r\n            &.pixi-section {\r\n                box-shadow: -2px 9px 28px -2px #1a1a1a;\r\n                width: calc(1200px * 0.65);\r\n                height: calc(950px * 0.65);\r\n            }\r\n            .card-info {\r\n                display: flex;\r\n                ul {\r\n                    margin: 0;\r\n                    padding: 0;\r\n                    list-style: none;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    li {\r\n                        display: block;\r\n                        position: relative;\r\n                        margin: 0 2px 5px;\r\n                        button {\r\n                            width: 141px;\r\n                            padding: 7px 4px;   \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #pixiContainer {\r\n        display: flex;\r\n        transform: scale(0.65);\r\n        transform-origin: top left;\r\n    }\r\n</style>","<template>\r\n    <div id=\"library-zone\" class=\"zone\">\r\n        <div class=\"zone-con\" v-if=\"gameState?.you?.zone?.library?.length > 0\">\r\n            <div class=\"zone-options\">\r\n                <button @click=\"gameState.drawCard\">Draw a card</button>\r\n                <button @click=\"reveal()\">Reveal</button>\r\n                <button @click=\"shuffle()\">Shuffle</button>\r\n            </div>\r\n            <ul>\r\n                <li v-for=\"(card, i) in gameState.you.zone.library.slice().reverse()\" :key=\"i\">\r\n                    <img :src=\"card.isFaceUp ? card.imageUris.small : '/back-small.jpeg'\" />\r\n                    <template v-if=\"card.isFaceUp && !modalState.isActive\">\r\n                        <button @click=\"pick(card)\">Pick</button>\r\n                        <button \r\n                            @click=\"gameState.shiftLibraryCard(card, 'right')\" \r\n                            v-if=\"i < gameState.you.zone.library.slice().reverse().length-1 && gameState.you.zone.library.slice().reverse()[i+1].isFaceUp\"\r\n                        >\r\n                            >>\r\n                        </button>\r\n                        <button  \r\n                            @click=\"gameState.shiftLibraryCard(card, 'left')\"\r\n                            v-if=\"i > 0 && gameState.you.zone.library.slice().reverse()[i-1].isFaceUp\"\r\n                        >\r\n                            <<\r\n                        </button>\r\n                    </template>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <template v-if=\"modalState.isActive\">\r\n        <ModalsGlobal v-if=\"modalState.type == 'reveal'\">\r\n            <template #header>\r\n                Reveal\r\n            </template>\r\n            <button @click=\"gameState.revealTopLibrary()\">Reveal 1</button>\r\n            <button @click=\"gameState.setFaceupLibrary();modalState.isActive=false\">Reveal All</button>\r\n            <template #footer>\r\n                <button @click=\"modalState.isActive = false\">Close</button>\r\n            </template>\r\n        </ModalsGlobal>\r\n        <ModalsGlobal v-else-if=\"modalState.type == 'pick'\">\r\n            <template #header>\r\n                Pick\r\n            </template>\r\n\r\n            <button @click=\"selectedCard ? moveToBottomLibrary() : () => {}\">\r\n                Move to Bottom Library\r\n            </button>\r\n            <!-- <button @click=\"toBattlefield()\">To Battlefield</button>\r\n            <button @click=\"selectedCard ? gameState.changeZone(selectedCard, 'hand', 'graveyard') : ()=>{}\">To Graveyard</button>\r\n            <button @click=\"selectedCard ? gameState.changeZone(selectedCard, 'hand', 'exile') : ()=>{}\">To Exile</button> -->\r\n            <!-- <button @click=\"giveToOpponent(card)\">Give to Opponent</button> -->\r\n\r\n            <template #footer>\r\n                <button @click=\"modalState.isActive = false\">Close</button>\r\n            </template>\r\n        </ModalsGlobal>\r\n        <ModalsGlobal v-else-if=\"modalState.isActive && modalState.type == 'cardFace'\">\r\n            <template #header>\r\n                Select Card Face\r\n            </template>\r\n            <button @click=\"selectCardFace(true)\">Face Up</button>\r\n            <button @click=\"selectCardFace(false)\">Face Down</button>\r\n            <template #footer>\r\n                <button @click=\"modalState.isActive = false\">Close</button>\r\n            </template>\r\n        </ModalsGlobal>\r\n    </template>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { useGameStore } from '~/stores/game';\r\n    import type { GameCard } from '~/types/Card';\r\n\r\n    const gameState = useGameStore()\r\n    const modalState = ref<{isActive: boolean, type: string | null}>({isActive: false, type: null})\r\n    const selectedCard = ref<GameCard | null>(null)\r\n\r\n    const reveal = () => {\r\n        modalState.value.type = 'reveal'\r\n        modalState.value.isActive = true\r\n    }\r\n\r\n    const shuffle = () => {\r\n        gameState.setFaceupLibrary(false)\r\n        gameState.shuffle()\r\n    }\r\n\r\n    const pick = (card: GameCard) => {\r\n        selectedCard.value          = card\r\n        modalState.value.type       = 'pick'\r\n        modalState.value.isActive   = true\r\n    }\r\n\r\n    const moveToBottomLibrary = () => {\r\n        if(selectedCard.value) {\r\n            gameState.moveToBottomLibrary(selectedCard.value)\r\n            modalState.value.isActive = false\r\n        }\r\n    }\r\n\r\n    const toBattlefield = (card:GameCard) => {\r\n        selectedCard.value          = card\r\n        modalState.value.isActive   = true\r\n        modalState.value.type       = 'cardFace'\r\n    }\r\n\r\n    const selectCardFace = (isFaceUp = true) => {\r\n        if(selectedCard.value) {\r\n            selectedCard.value.isFaceUp     = isFaceUp\r\n            selectedCard.value.isRevealed   = isFaceUp\r\n            gameState.changeZone(selectedCard.value, 'hand', 'battlefield')\r\n            modalState.value.isActive = false\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    #library-zone {\r\n        ul {\r\n            display: flex;\r\n            column-gap: 5px;\r\n            overflow: auto;\r\n            li {\r\n                list-style: none;\r\n                display: flex;\r\n                flex-direction: column;\r\n                img {\r\n                    pointer-events: none;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>","<template>\r\n    <div id=\"hand-zone\" class=\"zone\">\r\n        <ul v-if=\"gameState?.you?.zone?.hand?.length > 0\">\r\n            <li v-for=\"(card, i) in gameState.you.zone.hand\" :key=\"i\">\r\n                <img class=\"magnified-zone\" v-if=\"hoveredCard && hoveredCard.id === card.id\" :src=\"card.imageUris.normal\"/>\r\n                <img :src=\"card.imageUris.small\" @mouseover=\"isHovered(true, card)\" @mouseleave=\"isHovered(false, card)\" />\r\n                <button @click=\"toBattlefield(card)\">To Battlefield</button>\r\n                <button @click=\"gameState.changeZone(card, 'hand', 'graveyard')\">To Graveyard</button>\r\n                <button @click=\"gameState.changeZone(card, 'hand', 'exile')\">To Exile</button>\r\n                <button @click=\"gameState.changeZone(card, 'hand', 'library')\">To Library</button>\r\n                <button @click=\"giveToOpponent(card)\">Give to Opponent</button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <ModalsGlobal v-if=\"modalState.isActive && modalState.type == 'cardFace'\">\r\n        <template #header>\r\n            Select Card Face\r\n        </template>\r\n        <button @click=\"selectCardFace(true)\" class=\"btn bg-primary\">Face Up</button>\r\n        <button @click=\"selectCardFace(false)\" class=\"btn bg-primary muted\">Face Down</button>\r\n        <template #footer>\r\n            <button @click=\"modalState.isActive = false\" class=\"btn bg-primary\">Close</button>\r\n        </template>\r\n    </ModalsGlobal>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { useGameStore } from '~/stores/game';\r\n    import type { Card, GameCard } from '~/types/Card';\r\n    import type { Player } from '~/types/Player';\r\n\r\n    const gameState = useGameStore()\r\n    const modalState = useState<{isActive: boolean, type: string | null}>('modalState', () => ({isActive: false, type: null}))\r\n    const selectedCard: Ref<GameCard | null> = ref(null)\r\n    const hoveredCard: Ref<GameCard | null> = ref(null)\r\n\r\n    const toBattlefield = (card:GameCard) => {\r\n        selectedCard.value          = card\r\n        modalState.value.isActive   = true\r\n        modalState.value.type       = 'cardFace'\r\n    }\r\n\r\n    const selectCardFace = (isFaceUp = true) => {\r\n        if(selectedCard.value) {\r\n            selectedCard.value.isFaceUp     = isFaceUp\r\n            selectedCard.value.isRevealed   = isFaceUp\r\n            gameState.changeZone(selectedCard.value, 'hand', 'battlefield')\r\n            modalState.value.isActive = false\r\n        }\r\n    }\r\n\r\n    const isHovered = (hovered: boolean, card: GameCard) => {\r\n        if(hovered)\r\n            hoveredCard.value = card\r\n        else\r\n            hoveredCard.value = null\r\n    }\r\n\r\n    const giveToOpponent = (card:GameCard) => {\r\n        \r\n    }\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    #hand-zone {\r\n        ul {\r\n            display: flex;\r\n            column-gap: 5px;\r\n            overflow: auto;\r\n            position: relative;\r\n            li {\r\n                list-style: none;\r\n                display: flex;\r\n                flex-direction: column;\r\n                position: relative;\r\n                img {\r\n                    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .magnified-zone {\r\n        position:fixed; \r\n        left: 50%; \r\n        top: 5px;\r\n        z-index: 10; \r\n        pointer-events: none;\r\n        transform: translateX(-50%);\r\n        scale: 0.7;\r\n        transform-origin: top left;\r\n        box-shadow: 0 0 45px 22px #C5A100;\r\n    }\r\n</style>","<template>\r\n    <div id=\"graveyard-zone\" class=\"zone\">\r\n        <ul v-if=\"gameState?.you?.zone?.graveyard?.length > 0\">\r\n            <li v-for=\"(card, i) in gameState.you.zone.graveyard\" :key=\"i\">\r\n                <img :src=\"card.imageUris.small\" />\r\n                <button @click=\"gameState.changeZone(card, 'graveyard', 'battlefield')\">To Battlefield</button>\r\n                <button @click=\"gameState.changeZone(card, 'graveyard', 'hand')\">To Hand</button>\r\n                <button @click=\"gameState.changeZone(card, 'graveyard', 'exile')\">To Exile</button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { useGameStore } from '~/stores/game';\r\n    import type { Card, GameCard } from '~/types/Card';\r\n    import type { Player } from '~/types/Player';\r\n\r\n    const gameState = useGameStore()\r\n\r\n    const onPlay = (index: number) => {\r\n        gameState.playCard(index)\r\n    }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    #graveyard-zone {\r\n        ul {\r\n            display: flex;\r\n            column-gap: 5px;\r\n            overflow: auto;\r\n            li {\r\n                list-style: none;\r\n                display: flex;\r\n                flex-direction: column;\r\n                img {\r\n                    pointer-events: none;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>","<template>\r\n    <div id=\"exile-zone\" class=\"zone\">\r\n        <ul v-if=\"gameState?.you?.zone?.exile?.length > 0\">\r\n            <li v-for=\"(card, i) in gameState.you.zone.exile\" :key=\"i\">\r\n                <img :src=\"card.imageUris.small\" />\r\n                <button @click=\"gameState.changeZone(card, 'exile', 'battlefield')\">To Battlefield</button>\r\n                <button @click=\"gameState.changeZone(card, 'exile', 'hand')\">To Hand</button>\r\n                <button @click=\"gameState.changeZone(card, 'exile', 'graveyard')\">To Graveyard</button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { useGameStore } from '~/stores/game';\r\n\r\n    const gameState = useGameStore()\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    #exile-zone {\r\n        ul {\r\n            display: flex;\r\n            column-gap: 5px;\r\n            overflow: auto;\r\n            li {\r\n                list-style: none;\r\n                display: flex;\r\n                flex-direction: column;\r\n                img {\r\n                    pointer-events: none;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>","<template>\r\n    <div id=\"game-page\">\r\n        <template v-if=\"Object.keys(gameState.you).length > 0 && (getConnectedCount === gameState.getPlayers.length)\">\r\n            <div id=\"players-stats\">\r\n                <div class=\"player-stats-con\" v-for=\"(player, index) in gameState.players\" :key=\"index\">\r\n                    <button \r\n                        @click=\"selectedPlayerTab && selectedPlayerTab.id === player.id \r\n                            ? selectedPlayerTab = null \r\n                            : selectedPlayerTab = player\">\r\n                                {{ player.name }} | h: {{ player.health }}\r\n                    </button>\r\n                    <ul v-if=\"selectedPlayerTab && selectedPlayerTab.id === player.id\">\r\n                        <li>health: {{ player.health }} \r\n                            <button @click=\"gameState.updateHealth(gameState.getYourInfo.health-1)\">-</button>\r\n                            <button @click=\"gameState.updateHealth(gameState.getYourInfo.health+1)\">+</button>\r\n                        </li>\r\n                        <li>Total Cards: {{ player.cards.length }}</li>\r\n                        <li>Library: {{ player.zone.library.length }}</li>\r\n                        <li>Battlefield: {{ player.zone.battlefield.length }}</li>\r\n                        <li @click=\"showPlayerZone('playerGraveyard', player.zone.graveyard)\">Graveyard: {{ player.zone.graveyard.length }}</li>\r\n                        <li @click=\"showPlayerZone('playerExile', player.zone.exile)\">Exile: {{ player.zone.exile.length }}</li>\r\n                        <li>Hand: {{ player.zone.hand.length }}</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            \r\n            <GameField v-if=\"Object.keys(gameState.you).length > 0\" />\r\n\r\n            <div v-if=\"Object.keys(gameState.you).length > 0\" id=\"zones\">\r\n                <div class=\"zone-tab\">\r\n                    <ul>\r\n                        <li @click=\"selectedTab = 'library'\" class=\"tab-library\">Library</li>\r\n                        <li @click=\"selectedTab = 'hand'\" class=\"tab-hand\">Hand</li>\r\n                        <li @click=\"selectedTab = 'graveyard'\" class=\"tab-graveyard\">Graveyard</li>\r\n                        <li @click=\"selectedTab = 'exile'\" class=\"tab-exile\">Exile</li>\r\n                        <li @click=\"selectedTab = 'minimized'\">Minimized</li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"zone-content\">\r\n                    <section v-show=\"selectedTab === 'library'\" class=\"tab-library\"><Library /></section>\r\n                    <section v-show=\"selectedTab === 'hand'\" class=\"tab-hand\"><Hand/></section>\r\n                    <section v-show=\"selectedTab === 'graveyard'\" class=\"tab-graveyard\"><Graveyard /></section>\r\n                    <section v-show=\"selectedTab === 'exile'\" class=\"tab-exile\"><Exile /></section>\r\n                </div>\r\n            </div>\r\n        </template>\r\n\r\n        <ModalsGlobal v-if=\"modalState.isActive && modalState.type && ['playerGraveyard', 'playerExile'].includes(modalState.type)\">\r\n            <template #header>\r\n                <template v-if=\"modalState.type == 'playerGraveyard'\">Graveyard</template>\r\n                <template v-else-if=\"modalState.type == 'playerExile'\">Exile</template>\r\n            </template>\r\n            \r\n            <ul class=\"zone-card-list\">\r\n                <li v-for=\"(card, index) in modalState.data\" :key=\"index\">\r\n                    <img :src=\"card.imageUris.small\" />\r\n                </li>\r\n            </ul>\r\n\r\n            <template #footer>\r\n                <button \r\n                    class=\"btn bg-primary muted\"\r\n                    @click=\"modalState.isActive = false\">\r\n                        Close\r\n                </button>\r\n            </template>\r\n        </ModalsGlobal>\r\n\r\n        <ModalsGlobal v-else-if=\"Object.keys(gameState.you).length === 0 || (getConnectedCount != gameState.getPlayers.length)\" class=\"join-modal\">\r\n            <template #header>\r\n                Join Game\r\n            </template>\r\n            <h4>Connected: {{ getConnectedCount }}</h4>\r\n            Upload Deck: <input type=\"file\" id=\"fileInput\" accept=\".txt\">\r\n            <p v-if=\"fetchedDeck.isLoading\">Uploading Deck...</p>\r\n            <ol v-if=\"fetchedDeck.data && fetchedDeck.data.length > 0 && !fetchedDeck.isLoading\">\r\n                <li v-for=\"(card, index) in fetchedDeck.data\" :key=\"index\">\r\n                    <template v-if=\"card\">\r\n                        {{ card.name }} - {{ card.quantity }}\r\n                    </template>\r\n                </li>\r\n            </ol>\r\n\r\n            <template #footer>\r\n                <button \r\n                    v-if=\"Object.keys(gameState.you).length === 0\"\r\n                    :class=\"['btn', 'bg-primary', {'disabled' : !fetchedDeck.data}]\"\r\n                    @click=\"join()\">\r\n                        Join\r\n                </button>\r\n                <p v-else>Waiting for other players to join...</p>\r\n            </template>\r\n        </ModalsGlobal>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { ModalsGlobal } from '#components';\r\n    import { useGameStore } from '~/stores/game';\r\n    import type { Card, GameCard } from '~/types/Card';\r\n    import type { Player } from '~/types/Player';\r\n\r\n    let gameState = useGameStore()\r\n    const selectedTab: Ref<string> = ref('library')\r\n    const selectedPlayerTab: Ref<null | Player> = ref(null)\r\n    const modalState: Ref<{isActive: boolean, type: string | null, data: Object}> = ref({isActive: false, type: 'playerGraveyard', data: Object})\r\n    const fetchedDeck: Ref<{data: Card[] | null, isLoading: boolean}> = ref({data: null, isLoading: false})\r\n\r\n    const getConnectedCount = computed(() => gameState.getConnectedCount);\r\n\r\n    const join = () => {\r\n        if(fetchedDeck.value.data && fetchedDeck.value.data.length > 0) {\r\n            gameState.join()\r\n            const you: Player = gameState.you\r\n            you.cards = fetchedDeck.value.data\r\n            gameState.cardsToLibrary()\r\n            gameState.shuffle()\r\n            gameState.updatePlayer(you)\r\n            modalState.value.isActive = false; \r\n        }\r\n    }\r\n\r\n    const showPlayerZone = (zoneType: string, zone: GameCard[]) => {\r\n        modalState.value.isActive   = true\r\n        modalState.value.type       = zoneType\r\n        modalState.value.data       = zone\r\n    }\r\n\r\n    async function fetchCardsFromFile(file: File) {\r\n        const text = await file.text(); // Read the text file\r\n\r\n        // Convert input text to JSON (array of objects with quantity and name)\r\n        const cardIdentifiers: any = text.split('\\n').reduce((acc: any, line) => {\r\n            const [count, ...nameParts] = line.trim().split(' ');\r\n            const name = nameParts.join(' ');\r\n\r\n            const existingItem = acc.find((item: { name: string; }) => item.name === name);\r\n\r\n            if (existingItem) {\r\n                existingItem.quantity += parseInt(count, 10);\r\n            } else {\r\n                acc.push({ name, quantity: parseInt(count, 10) });\r\n            }\r\n\r\n            return acc;\r\n        }, []);\r\n        \r\n        // Fetch from Scryfall\r\n        const response = await fetch(\"https://api.scryfall.com/cards/collection\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ identifiers: cardIdentifiers })\r\n        });\r\n\r\n        const data: any = await response.json();\r\n        const cards: Card[] = []\r\n        if(data && data.data) {\r\n            cardIdentifiers.forEach((cardIdentifier: any) => {\r\n                data.data.forEach((d: { name: any; id: any; image_uris: any; all_parts: object[] | null; power: string, toughness: string }) => {\r\n                    if(d.name === cardIdentifier.name) {\r\n                        cards.push({\r\n                            sourceId:   d.id, \r\n                            name:       d.name, \r\n                            imageUris:  d.image_uris, \r\n                            allParts:   d.all_parts || null,\r\n                            quantity:   cardIdentifier.quantity,\r\n                            power:      !isNaN(parseInt(d.power)) ? parseInt(d.power) : 0,\r\n                            toughness:  !isNaN(parseInt(d.toughness)) ? parseInt(d.toughness) : 0,\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        fetchedDeck.value.data = cards;\r\n        fetchedDeck.value.isLoading = false;\r\n    }\r\n\r\n    onMounted(() => {\r\n        gameState.startWebSocketServer()\r\n\r\n        document.getElementById(\"fileInput\")?.addEventListener(\"change\", (event) => {\r\n            const file = (event.target as HTMLInputElement).files?.[0];\r\n            if (file) {\r\n                fetchedDeck.value.isLoading = true\r\n                fetchCardsFromFile(file);\r\n            }\r\n        });\r\n    });\r\n    \r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    #zones {\r\n        position: fixed;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n        z-index: 1;\r\n        .zone-tab {\r\n            ul {\r\n                padding: 0;\r\n                display: flex;\r\n                list-style: none;\r\n                margin: 0;\r\n                li {\r\n                    padding: 10px 14px;\r\n                    background: blue;\r\n                    border-radius: 8px 8px 0 0;\r\n                    min-width: 100px;\r\n                    text-align: center;\r\n                    cursor: pointer;\r\n                    color: #fff;\r\n                    font-weight: 700;\r\n                    text-shadow: 0px 0px 19px black;\r\n                }    \r\n            }\r\n        }\r\n        .zone-content {\r\n            section {\r\n                padding:40px 24px;            }\r\n        }\r\n        .tab-library {\r\n            background: #4B008286 !important;\r\n        }\r\n        .tab-hand {\r\n            background: #FFA50086 !important;\r\n        }\r\n        .tab-graveyard {\r\n            background: #55555586 !important;\r\n        }\r\n        .tab-exile {\r\n            background: #FF450086 !important;\r\n        }\r\n    }\r\n    \r\n    #players-stats {\r\n        display: flex;\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        .player-stats-con {\r\n            h4 {\r\n                \r\n            }\r\n            ul {\r\n                list-style: none;\r\n                margin: 0;\r\n                padding: 0;\r\n                background: #A68B6D;\r\n                li {\r\n                    border-bottom: 1px solid #1a1a1a31;\r\n                    padding: 5px 8px;\r\n                    cursor: pointer;\r\n                    &:last-child {\r\n                        border-bottom: none;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .zone-card-list {\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 0;\r\n        display: flex;\r\n        column-gap: 4px;\r\n        justify-content: center;\r\n    }\r\n\r\n    .join-modal {\r\n        ol {\r\n            max-height: 150px;\r\n            overflow: auto;\r\n            height: 150px;\r\n            li {\r\n\r\n            }\r\n        }\r\n    }\r\n</style>"],"names":["_ssrRenderAttrs","_mergeProps","_ssrRenderSlot","index"],"mappings":"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","x_google_ignoreList":[0]}